from eulerutils import *

def pe001(end = 1000):
    """
    Multiples of 3 and 5
    Problem 1

    If we list all the natural numbers below 10 that are multiples of 3 or 5, 
    we get 3, 5, 6 and 9. The sum of these multiples is 23.
    
    Find the sum of all the multiples of 3 or 5 below 1000.
    
    """
    
    total = 0
    
    for i in xrange(end):
        if i % 3 == 0 or i % 5 == 0: 
            total += i
    
    return total


def pe002(end = 4000000):
    """
    Even Fibonacci numbers
    Problem 2
    
    Each new term in the Fibonacci sequence is generated by adding the 
    previous two terms. By starting with 1 and 2, the first 10 terms will be:
    1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...

    By considering the terms in the Fibonacci sequence whose values do not 
    exceed four million, find the sum of the even-valued terms.

    """
    
    total = 0
    
    for i in fibonacci(end):
        if i % 2 == 0:
            total += i
    
    return total


def pe003(n = 600851475143):
    """
    Largest prime factor
    Problem 3
    
    (non-prime n)
    
    The prime factors of 13195 are 5, 7, 13 and 29.
    What is the largest prime factor of the number 600851475143?
    
    """
    
    if n < 2: return None
    
    while n % 2 == 0:
        n //= 2
    if n == 1:
        return 2
    
    i = 3
    while i*i <= n:
        if n % i:
            i += 2
        else:
            n //= i
    
    return n


def pe004():
    """
    Largest palindrome product
    Problem 4
    
    A palindromic number reads the same both ways. The largest palindrome 
    made from the product of two 2-digit numbers is 9009 = 91 * 99.

    Find the largest palindrome made from the product of two 3-digit numbers.
    
    """
    
    arr = []
    for i in xrange(999, 99, -1):
        for j in xrange(999, i-1, -1):
            tmp = str(i*j)
            if tmp == tmp[::-1]:
                arr.append(int(tmp))
                break

    return max(arr)


def pe005(n = 20):
    """
    Smallest multiple
    Problem 5
    
    2520 is the smallest number that can be divided by each of the numbers 
    from 1 to 10 without any remainder. What is the smallest positive number 
    that is evenly divisible by all of the numbers from 1 to 20?
    
    """
    
    allfact = []
    for i in xrange(2, n):
        factors = factorization(i)
        allfact.extend(factors)
    
    allfact = sorted(set(allfact))
    
    ans, a, b = 1, 0, 0
    for af in allfact:
        fact, exp = af
        if fact > a:
            ans *= a**b
            a, b = fact, 0
        if exp > b:
            b = exp
    ans *= a**b
    
    return ans


def pe006(n = 100):
    """
    Sum square difference
    Problem 6
    
    The sum of the squares of the first ten natural numbers is
        1**2 + 2**2 + ... + 10**2 = 385
    The square of the sum of the first ten natural numbers is
        (1 + 2 + ... + 10)**2 = 55**2 = 3025
    Hence the difference between the sum of the squares of the first ten 
    natural numbers and the square of the sum is 
        3025 - 385 = 2640.

    Find the difference between the sum of the squares of the first one 
    hundred natural numbers and the square of the sum.
    
    Formula
    \sum_1^n (x) = n(n+1)/2
    \sum_1^n (x**2) = (n/6)(2n+1)(n+1)
    
    """
    return sum_n(n)**2 - sum_n2(n)


def pe007(n = 10001):
    """
    10001st prime
    Problem 7
    
    By listing the first six prime numbers: 2, 3, 5, 7, 11, and 13, we can 
    see that the 6th prime is 13. What is the 10001st prime number?
    
    """
    
    # assume avg prime gap of 1/10
    gap = n // 10
    
    count = 0
    for p in primes(n*gap):
        count += 1
        if count == n:
            return p
    #print count, p


def pe008():
    """
    Largest product in a series
    Problem 8

    The four adjacent digits in the 1000-digit number that have the greatest 
    product are 9 * 9 * 8 * 9 = 5832. (see number below)

    Find the thirteen adjacent digits in the 1000-digit number that have the 
    greatest product. What is the value of this product?
    
    """

    s = '73167176531330624919225119674426574742355349194934' + \
        '96983520312774506326239578318016984801869478851843' + \
        '85861560789112949495459501737958331952853208805511' + \
        '12540698747158523863050715693290963295227443043557' + \
        '66896648950445244523161731856403098711121722383113' + \
        '62229893423380308135336276614282806444486645238749' + \
        '30358907296290491560440772390713810515859307960866' + \
        '70172427121883998797908792274921901699720888093776' + \
        '65727333001053367881220235421809751254540594752243' + \
        '52584907711670556013604839586446706324415722155397' + \
        '53697817977846174064955149290862569321978468622482' + \
        '83972241375657056057490261407972968652414535100474' + \
        '82166370484403199890008895243450658541227588666881' + \
        '16427171479924442928230863465674813919123162824586' + \
        '17866458359124566529476545682848912883142607690042' + \
        '24219022671055626321111109370544217506941658960408' + \
        '07198403850962455444362981230987879927244284909188' + \
        '84580156166097919133875499200524063689912560717606' + \
        '05886116467109405077541002256983155200055935729725' + \
        '71636269561882670428252483600823257530420752963450'
    
    s = filter(lambda a: len(a) > 12, s.split('0'))
    product = 0
    ranger = range(13)
    
    for num in s:
        for n in xrange(len(num) - 12):
            tmp = 1
            for i in ranger: tmp *= int(num[n+i])
            if tmp > product: product = tmp

    return product


def pe009(n = 1000):
    """
    Special Pythagorean triplet
    Problem 9
    
    A Pythagorean triplet is a set of three natural numbers, a < b < c, 
    for which a2 + b2 = c2. For example, 32 + 42 = 9 + 16 = 25 = 52.

    There exists exactly one Pythagorean triplet for which a + b + c = 1000.
    Find the product abc.
    
    """
    
    for triple in pythagorean(n):
        if n == sum(triple):
            return reduce(lambda x, y: x*y, triple)  # can optimize


def pe010():
    """
    Summation of primes
    Problem 10
    
    The sum of the primes below 10 is 2 + 3 + 5 + 7 = 17.
    Find the sum of all the primes below two million.
    
    """

    total = 0
    for p in primes(2000000):
        total += p
    
    return total


def pe011():
    """
    
    
    """
    pass
    